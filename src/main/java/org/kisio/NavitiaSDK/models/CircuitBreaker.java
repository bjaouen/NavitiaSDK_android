/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.43.0-34-g30b0bcf
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.kisio.NavitiaSDK.models;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import android.os.Parcelable;
import android.os.Parcel;

/**
 * CircuitBreaker
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.NavitiaSDKJavaClientCodegen", date = "2017-11-03T11:50:27.015+01:00")
public class CircuitBreaker implements Parcelable {
  @SerializedName("fail_counter")
  private Integer failCounter = null;

  @SerializedName("current_state")
  private String currentState = null;

  @SerializedName("reset_timeout")
  private Integer resetTimeout = null;

  public CircuitBreaker failCounter(Integer failCounter) {
    this.failCounter = failCounter;
    return this;
  }

   /**
   * Get failCounter
   * @return failCounter
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getFailCounter() {
    return failCounter;
  }

  public void setFailCounter(Integer failCounter) {
    this.failCounter = failCounter;
  }

  public CircuitBreaker currentState(String currentState) {
    this.currentState = currentState;
    return this;
  }

   /**
   * Get currentState
   * @return currentState
  **/
  @ApiModelProperty(required = true, value = "")
  public String getCurrentState() {
    return currentState;
  }

  public void setCurrentState(String currentState) {
    this.currentState = currentState;
  }

  public CircuitBreaker resetTimeout(Integer resetTimeout) {
    this.resetTimeout = resetTimeout;
    return this;
  }

   /**
   * Get resetTimeout
   * @return resetTimeout
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getResetTimeout() {
    return resetTimeout;
  }

  public void setResetTimeout(Integer resetTimeout) {
    this.resetTimeout = resetTimeout;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CircuitBreaker circuitBreaker = (CircuitBreaker) o;
    return Objects.equals(this.failCounter, circuitBreaker.failCounter) &&
        Objects.equals(this.currentState, circuitBreaker.currentState) &&
        Objects.equals(this.resetTimeout, circuitBreaker.resetTimeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failCounter, currentState, resetTimeout);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CircuitBreaker {\n");
    
    sb.append("    failCounter: ").append(toIndentedString(failCounter)).append("\n");
    sb.append("    currentState: ").append(toIndentedString(currentState)).append("\n");
    sb.append("    resetTimeout: ").append(toIndentedString(resetTimeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
  public void writeToParcel(Parcel out, int flags) {
     
    out.writeValue(failCounter);

    out.writeValue(currentState);

    out.writeValue(resetTimeout);
  }

  public CircuitBreaker() {
    super();
  }

  CircuitBreaker(Parcel in) {
    
    failCounter = (Integer)in.readValue(null);
    currentState = (String)in.readValue(null);
    resetTimeout = (Integer)in.readValue(null);
  }
  
  public int describeContents() {
    return 0;
  }

  public static final Parcelable.Creator<CircuitBreaker> CREATOR = new Parcelable.Creator<CircuitBreaker>() {
    public CircuitBreaker createFromParcel(Parcel in) {
      return new CircuitBreaker(in);
    }
    public CircuitBreaker[] newArray(int size) {
      return new CircuitBreaker[size];
    }
  };
}

