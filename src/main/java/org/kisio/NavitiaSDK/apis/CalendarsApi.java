/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.43.0-34-g30b0bcf
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.kisio.NavitiaSDK.apis;

import org.kisio.NavitiaSDK.invokers.ApiCallback;
import org.kisio.NavitiaSDK.invokers.ApiClient;
import org.kisio.NavitiaSDK.invokers.ApiException;
import org.kisio.NavitiaSDK.invokers.ApiResponse;
import org.kisio.NavitiaSDK.invokers.Configuration;
import org.kisio.NavitiaSDK.invokers.Pair;
import org.kisio.NavitiaSDK.invokers.ProgressRequestBody;
import org.kisio.NavitiaSDK.invokers.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.kisio.NavitiaSDK.models.Calendars;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CalendarsApi {
    private ApiClient apiClient;

    public CalendarsApi(String token) throws Exception {
        if (token == null || token.trim().isEmpty()) {
          throw new Exception("Navitia token cannot be empty");
        }
        ApiClient apiClient = new ApiClient();
        apiClient.setUsername(token);
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCoverageRegionCalendars
     * @param region  The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageRegionCalendarsCall(String region, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{region}/calendars"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end_date", endDate));
        if (forbiddenId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            ""
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageRegionCalendarsValidateBeforeCall(String region, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionCalendars(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageRegionCalendarsCall(region, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param region  The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @return Calendars
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Calendars getCoverageRegionCalendars(String region, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance) throws ApiException {
        ApiResponse<Calendars> resp = getCoverageRegionCalendarsWithHttpInfo(region, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param region  The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @return ApiResponse&lt;Calendars&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Calendars> getCoverageRegionCalendarsWithHttpInfo(String region, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageRegionCalendarsValidateBeforeCall(region, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, null, null);
        Type localVarReturnType = new TypeToken<Calendars>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param region  The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionCalendarsAsync(String region, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ApiCallback<Calendars> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionCalendarsValidateBeforeCall(region, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Calendars>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param region  The region you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionCalendarsAsyncRaw(String region, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionCalendarsValidateBeforeCall(region, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionCalendarsRequestBuilder newCoverageRegionCalendarsRequestBuilder() {
        return new CoverageRegionCalendarsRequestBuilder(this);
    }

    public class CoverageRegionCalendarsRequestBuilder {
        private CalendarsApi currentApi;
        private String region;
        private Integer depth;
        private Integer count;
        private Integer startPage;
        private String startDate;
        private String endDate;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private Integer distance;

        public CoverageRegionCalendarsRequestBuilder(CalendarsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionCalendarsRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionCalendarsRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionCalendarsRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionCalendarsRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionCalendarsRequestBuilder withStartDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        public CoverageRegionCalendarsRequestBuilder withEndDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        public CoverageRegionCalendarsRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionCalendarsRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionCalendarsRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<Calendars > callback) throws ApiException {
            return currentApi.getCoverageRegionCalendarsAsync(this.region, this.depth, this.count, this.startPage, this.startDate, this.endDate, this.forbiddenId, this.forbiddenUris, this.distance, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionCalendarsAsyncRaw(this.region, this.depth, this.count, this.startPage, this.startDate, this.endDate, this.forbiddenId, this.forbiddenUris, this.distance, callback);
        }
    }
    /**
     * Build call for getCoverageRegionCalendarsId
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageRegionCalendarsIdCall(String region, String id, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{region}/calendars/{id}"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapePathParam(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end_date", endDate));
        if (forbiddenId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            ""
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageRegionCalendarsIdValidateBeforeCall(String region, String id, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionCalendarsId(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCoverageRegionCalendarsId(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageRegionCalendarsIdCall(region, id, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @return Calendars
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Calendars getCoverageRegionCalendarsId(String region, String id, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance) throws ApiException {
        ApiResponse<Calendars> resp = getCoverageRegionCalendarsIdWithHttpInfo(region, id, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @return ApiResponse&lt;Calendars&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Calendars> getCoverageRegionCalendarsIdWithHttpInfo(String region, String id, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageRegionCalendarsIdValidateBeforeCall(region, id, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, null, null);
        Type localVarReturnType = new TypeToken<Calendars>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionCalendarsIdAsync(String region, String id, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ApiCallback<Calendars> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionCalendarsIdValidateBeforeCall(region, id, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Calendars>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param region  The region you want to query (required)
     * @param id Id of the object you want to query (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionCalendarsIdAsyncRaw(String region, String id, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionCalendarsIdValidateBeforeCall(region, id, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionCalendarsIdRequestBuilder newCoverageRegionCalendarsIdRequestBuilder() {
        return new CoverageRegionCalendarsIdRequestBuilder(this);
    }

    public class CoverageRegionCalendarsIdRequestBuilder {
        private CalendarsApi currentApi;
        private String region;
        private String id;
        private Integer depth;
        private Integer count;
        private Integer startPage;
        private String startDate;
        private String endDate;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private Integer distance;

        public CoverageRegionCalendarsIdRequestBuilder(CalendarsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionCalendarsIdRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionCalendarsIdRequestBuilder withId(String id) {
            this.id = id;
            return this;
        }
        public CoverageRegionCalendarsIdRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionCalendarsIdRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionCalendarsIdRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionCalendarsIdRequestBuilder withStartDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        public CoverageRegionCalendarsIdRequestBuilder withEndDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        public CoverageRegionCalendarsIdRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionCalendarsIdRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionCalendarsIdRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<Calendars > callback) throws ApiException {
            return currentApi.getCoverageRegionCalendarsIdAsync(this.region, this.id, this.depth, this.count, this.startPage, this.startDate, this.endDate, this.forbiddenId, this.forbiddenUris, this.distance, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionCalendarsIdAsyncRaw(this.region, this.id, this.depth, this.count, this.startPage, this.startDate, this.endDate, this.forbiddenId, this.forbiddenUris, this.distance, callback);
        }
    }
    /**
     * Build call for getCoverageRegionUriCalendars
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    private com.squareup.okhttp.Call getCoverageRegionUriCalendarsCall(String region, String uri, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/coverage/{region}/{uri}/calendars"
            .replaceAll("\\{" + "region" + "\\}", apiClient.escapePathParam(region.toString()))
            .replaceAll("\\{" + "uri" + "\\}", apiClient.escapePathParam(uri.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "depth", depth));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_page", startPage));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "start_date", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "end_date", endDate));
        if (forbiddenId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_id[]", forbiddenId));
        if (forbiddenUris != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "forbidden_uris[]", forbiddenUris));
        if (distance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "distance", distance));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            ""
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCoverageRegionUriCalendarsValidateBeforeCall(String region, String uri, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'region' is set
        if (region == null) {
            throw new ApiException("Missing the required parameter 'region' when calling getCoverageRegionUriCalendars(Async)");
        }
        
        // verify the required parameter 'uri' is set
        if (uri == null) {
            throw new ApiException("Missing the required parameter 'uri' when calling getCoverageRegionUriCalendars(Async)");
        }
        

        com.squareup.okhttp.Call call = getCoverageRegionUriCalendarsCall(region, uri, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @return Calendars
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    protected Calendars getCoverageRegionUriCalendars(String region, String uri, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance) throws ApiException {
        ApiResponse<Calendars> resp = getCoverageRegionUriCalendarsWithHttpInfo(region, uri, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @return ApiResponse&lt;Calendars&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    private ApiResponse<Calendars> getCoverageRegionUriCalendarsWithHttpInfo(String region, String uri, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance) throws ApiException {
        com.squareup.okhttp.Call call = getCoverageRegionUriCalendarsValidateBeforeCall(region, uri, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, null, null);
        Type localVarReturnType = new TypeToken<Calendars>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionUriCalendarsAsync(String region, String uri, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ApiCallback<Calendars> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionUriCalendarsValidateBeforeCall(region, uri, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Calendars>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     *  (asynchronously)
     * 
     * @param region  The region you want to query (required)
     * @param uri First part of the uri (required)
     * @param depth The depth of your object (optional, default to 1)
     * @param count Number of calendars per page (optional, default to 10)
     * @param startPage The current page (optional)
     * @param startDate Start date (optional)
     * @param endDate End date (optional)
     * @param forbiddenId DEPRECATED, replaced by &#x60;forbidden_uris[]&#x60; (optional)
     * @param forbiddenUris forbidden uris (optional)
     * @param distance Distance range of the query. Used only if a coord is in the query (optional, default to 200)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    protected com.squareup.okhttp.Call getCoverageRegionUriCalendarsAsyncRaw(String region, String uri, Integer depth, Integer count, Integer startPage, String startDate, String endDate, List<String> forbiddenId, List<String> forbiddenUris, Integer distance, final ApiCallback<String > callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCoverageRegionUriCalendarsValidateBeforeCall(region, uri, depth, count, startPage, startDate, endDate, forbiddenId, forbiddenUris, distance, progressListener, progressRequestListener);
        apiClient.executeAsync(call, String.class, callback);
        return call;
    }

    public CoverageRegionUriCalendarsRequestBuilder newCoverageRegionUriCalendarsRequestBuilder() {
        return new CoverageRegionUriCalendarsRequestBuilder(this);
    }

    public class CoverageRegionUriCalendarsRequestBuilder {
        private CalendarsApi currentApi;
        private String region;
        private String uri;
        private Integer depth;
        private Integer count;
        private Integer startPage;
        private String startDate;
        private String endDate;
        private List<String> forbiddenId;
        private List<String> forbiddenUris;
        private Integer distance;

        public CoverageRegionUriCalendarsRequestBuilder(CalendarsApi currentApi) {
            this.currentApi = currentApi;
        }

        public CoverageRegionUriCalendarsRequestBuilder withRegion(String region) {
            this.region = region;
            return this;
        }
        public CoverageRegionUriCalendarsRequestBuilder withUri(String uri) {
            this.uri = uri;
            return this;
        }
        public CoverageRegionUriCalendarsRequestBuilder withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }
        public CoverageRegionUriCalendarsRequestBuilder withCount(Integer count) {
            this.count = count;
            return this;
        }
        public CoverageRegionUriCalendarsRequestBuilder withStartPage(Integer startPage) {
            this.startPage = startPage;
            return this;
        }
        public CoverageRegionUriCalendarsRequestBuilder withStartDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        public CoverageRegionUriCalendarsRequestBuilder withEndDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        public CoverageRegionUriCalendarsRequestBuilder withForbiddenId(List<String> forbiddenId) {
            this.forbiddenId = forbiddenId;
            return this;
        }
        public CoverageRegionUriCalendarsRequestBuilder withForbiddenUris(List<String> forbiddenUris) {
            this.forbiddenUris = forbiddenUris;
            return this;
        }
        public CoverageRegionUriCalendarsRequestBuilder withDistance(Integer distance) {
            this.distance = distance;
            return this;
        }

        public com.squareup.okhttp.Call get(final ApiCallback<Calendars > callback) throws ApiException {
            return currentApi.getCoverageRegionUriCalendarsAsync(this.region, this.uri, this.depth, this.count, this.startPage, this.startDate, this.endDate, this.forbiddenId, this.forbiddenUris, this.distance, callback);
        }

        public com.squareup.okhttp.Call rawGet(final ApiCallback<String > callback) throws ApiException {
            return currentApi.getCoverageRegionUriCalendarsAsyncRaw(this.region, this.uri, this.depth, this.count, this.startPage, this.startDate, this.endDate, this.forbiddenId, this.forbiddenUris, this.distance, callback);
        }
    }
}
